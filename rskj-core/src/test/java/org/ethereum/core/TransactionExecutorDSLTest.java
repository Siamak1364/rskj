package org.ethereum.core;

import co.rsk.db.RepositorySnapshot;
import co.rsk.pcc.InstallCode;
import co.rsk.test.World;
import co.rsk.test.dsl.DslParser;
import co.rsk.test.dsl.DslProcessorException;
import co.rsk.test.dsl.WorldDslProcessor;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.bouncycastle.util.BigIntegers;
import org.ethereum.crypto.ECKey;
import org.ethereum.crypto.signature.ECDSASignature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.spongycastle.util.Arrays;

import java.io.*;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;

public class TransactionExecutorDSLTest {

    private World world;
    private WorldDslProcessor processor;

    @BeforeEach
    void setup() {
        this.world = new World();
        this.processor = new WorldDslProcessor(world);

    }

    @Test
    void signTest() throws IOException, DslProcessorException, DecoderException {
        processor.processCommands(DslParser.fromResource("dsl/transaction/setup.txt"));
        final Account acc1 = world.getAccountByName("acc1");
        byte[] account = Arrays.concatenate(new byte[]{0,0,0,0,0,0,0,0,0,0,0,0}, acc1.getAddress().getBytes());
        byte[] nonce = new byte[32];
        nonce[31]=1;
        final InputStream isBytecode = ClassLoader.getSystemClassLoader().getResourceAsStream("dsl/transaction/AA_2UserMultisig.bytecode");
        String code = new BufferedReader(
                new InputStreamReader(isBytecode))
                .lines()
                .collect(Collectors.joining("\n"));
        final byte[] codeBytes = Hex.decodeHex(code);
        byte[] hash = InstallCode.getHashToSignFromCode(account, nonce, codeBytes);
        System.out.println("H:" + Hex.encodeHexString(hash)); //bd77c79c1808e3c2fdb12f3271f8371d0ff1d8c783828debd37975141bb8c2a5
        ECKey.ECDSASignature sign = acc1.getEcKey().doSign(hash);
        ECDSASignature signature = ECDSASignature.fromComponentsWithRecoveryCalculation(sign.r.toByteArray(), sign.s.toByteArray(), hash, acc1.getEcKey().getPubKey());
        byte[] rByte = BigIntegers.asUnsignedByteArray(32, signature.getR());
        byte[] sByte = BigIntegers.asUnsignedByteArray(32, signature.getS());
        byte[] vByte = Arrays.concatenate(new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                new byte[]{signature.getV()});
        System.out.println("Data: ");
        System.out.print(Hex.encodeHexString(account)); //000000000000000000000000a0663f719962ec10bb57865532bef522059dfd96
        System.out.print(Hex.encodeHexString(vByte)); //000000000000000000000000000000000000000000000000000000000000001b
        System.out.print(Hex.encodeHexString(rByte)); //b894b0f661f464c2e4b388fa6a073f9548479b33dc0f788e310d7b6de7c7fdfe
        System.out.print(Hex.encodeHexString(sByte)); //79c3bf648e4d6f71a2b36119e63260a2b4fd1426646c300ac37c9b82a690400b
        System.out.println(code); //60806040526004361015610018575b361561001657005b005b6000803560e01c9081631626ba7e146100bb5750806335804f77146100b25780634d22233b146100a957806352709725146100a05780635b18e7c614610097578063736889141461008e5780638b2937a8146100855763d58e2c9b0361000e576100806104d2565b61000e565b506100806104d2565b5061008061049d565b5061008061048b565b50610080610456565b506100806103d7565b50610080610261565b34610133576040600319360112610133576024359067ffffffffffffffff82116101335736602383011215610133576020610109610101366004860135602487016101e0565b600435610ef7565b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761016957604052565b610171610136565b604052565b60c0810190811067ffffffffffffffff82111761016957604052565b90601f601f19910116810190811067ffffffffffffffff82111761016957604052565b601f19601f60209267ffffffffffffffff81116101d3575b01160190565b6101db610136565b6101cd565b9291926101ec826101b5565b916101fa6040519384610192565b829481845281830111610217578281602093846000960137010152565b600080fd5b90816101c09103126102175790565b60606003198201126102175760043591602435916044359067ffffffffffffffff82116102175761025e9160040161021c565b90565b5061026b3661022b565b9150600090806103945750813580610309575081630b135d3f60e11b6102f06102b9610298602096610735565b935b6102ae6102a682610ded565b4710156104dc565b6101a081019061054d565b9190936102ea7fffffffff0000000000000000000000000000000000000000000000000000000095869436916101e0565b90610ef7565b1614610300575b60405191168152f35b600091506102f7565b6003810361032a5750602091630b135d3f60e11b6102f06102b96000610298565b6071036103505781630b135d3f60e11b6102f06102b961034b602096610c11565b610298565b606460405162461bcd60e51b815260206004820152601760248201527f456e636f64696e6720756e737570706f727465642074780000000000000000006044820152fd5b91630b135d3f60e11b6102f06102b96020959361029a565b6020600319820112610217576004359067ffffffffffffffff82116102175761025e9160040161021c565b506103e1366103ac565b80358061042357508061041d6103f961001693610735565b6104056102a684610ded565b6102ea6104166101a085018561054d565b36916101e0565b50610e36565b6003810361043a57506100169061041d60006103f9565b607103610350578061041d61045161001693610c11565b6103f9565b503461021757600060031936011261021757602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b50610016610498366103ac565b610e36565b503461021757600060031936011261021757602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b506100163661022b565b156104e357565b608460405162461bcd60e51b815260206004820152602260248201527f4e6f7420656e6f7567682062616c616e636520666f7220666565202b2076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610217570180359067ffffffffffffffff82116102175760200191813603831361021757565b9081519160005b8381106105b6575050016000815290565b80602080928401015181850152016105a5565b6105f9906105eb6105e59493604051958693602085019061059e565b9061059e565b03601f198101845283610192565b565b50634e487b7160e01b600052603260045260246000fd5b901561061b5790565b61025e6105fb565b604051906106308261014d565b600182527f81000000000000000000000000000000000000000000000000000000000000006020830152565b906105f9600261067693604051948591602083019061059e565b7f80800000000000000000000000000000000000000000000000000000000000008152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2810185520183610192565b9694919285939998969491996040519a8b9960208b016106e59161059e565b6106ee9161059e565b6106f79161059e565b6107009161059e565b6107099161059e565b6107129161059e565b91823701600081526107239161059e565b03601f19810183526105f99083610192565b6108299061074660c08201356109de565b61076961075660808401356109de565b61076360608501356109de565b906105c9565b9161078d73ffffffffffffffffffffffffffffffffffffffff60408301351661093d565b9261079b60e08301356109de565b610180830194606067ffffffffffffffff6107b6888761054d565b90501690600182141560001461085157506107d090610a7d565b925b606096610100860135610833575b6108219061081b6108168951855101865101875101885101610802848b61054d565b90508c5191010167ffffffffffffffff1690565b610b1b565b9661054d565b9690956106c6565b6020815191012090565b9650610821610849610844466109de565b61065c565b9790506107e0565b9390507f80000000000000000000000000000000000000000000000000000000000000006001600160f81b03196108a261089461088e8b8a61054d565b90610612565b356001600160f81b03191690565b16106107d25792506108b2610623565b926107d2565b604051906108c58261014d565b6001825260203681840137565b604051906080820182811067ffffffffffffffff8211176108ff575b604052604182526060366020840137565b610907610136565b6108ee565b90610916826101b5565b6109236040519182610192565b828152601f1961093382946101b5565b0190602036910137565b9060405161094a8161014d565b6015815260217fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082947f9400000000000000000000000000000000000000000000000000000000000000602085015260601b16910152565b6020908051156109b0570190565b6109b86105fb565b0190565b6060908051604010156109b0570190565b60a1908051608110156109b0570190565b906080821015610a3a576109f06108b8565b9180610a2857507f80000000000000000000000000000000000000000000000000000000000000005b60001a610a25836109a2565b53565b60f81b6001600160f81b031916610a19565b610a4382610b88565b91610a506002840161090c565b926001600160f81b03196081820160f81b1660001a610a6e856109a2565b53601f0360031b1b6021830152565b67ffffffffffffffff1660018114610b05576038811015610ac1576001600160f81b03196080610aab6108b8565b920160f81b1660001a610abd826109a2565b5390565b610aca81610b88565b90610ad76002830161090c565b916001600160f81b031960b8820160f81b1660001a610af5846109a2565b53601f0360031b1b602182015290565b634e487b7160e01b600052600160045260246000fd5b67ffffffffffffffff16906038821015610b54576001600160f81b031960c0610b426108b8565b930160f81b1660001a610a25836109a2565b610b5d82610b88565b91610b6a6002840161090c565b926001600160f81b031960f8820160f81b1660001a610a6e856109a2565b906000916fffffffffffffffffffffffffffffffff8111610c05575b8067ffffffffffffffff60ff9211610bf7575b63ffffffff8111610be9575b61ffff8111610bdb575b11610bd457565b9060010190565b60029060101c930192610bcd565b60049060201c930192610bc3565b60089060401c930192610bb7565b6010925060801c610ba4565b610dc4610dd0610ccd92610c2c61041661018083018361054d565b60208151910120604051948591602083019360e08101359060c08101359060a081013590608081013590606081013590604081013590602081013590358b95926101209794919a9998959261014088019b7f192135ce939640eca09b1703f47fdc067a0a240987f051b0ce714ce345b3f03e8952602089015260408801526060870152608086015260a085015260c084015260e08301526101008201520152565b0393610ce1601f1995868101835282610192565b519020926040516020810190610d7e81610d7246859190606060808401937fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e81527f94536914c3c87bf8bccd7c142a04a46168e0bef84c035c2a8dc43a3671b4727060208201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660408201520152565b03848101835282610192565b5190209360405193849160208301968790916042927f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201520190565b03908101835282610192565b51902090565b50634e487b7160e01b600052601160045260246000fd5b60e0608082013591606081013592838102938185041490151715610e22575b01358101809111610e1a5790565b61025e610dd6565b610e2a610dd6565b610e0c565b1561021757565b604081013573ffffffffffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff60e0830135818111610eb357610e839161041691169361018081019061054d565b9080610e9b57506105f99160208251920190f0610e2f565b81600092916105f99460208594519301915af1610e2f565b606460405162461bcd60e51b815260206004820152600860248201527f4f766572666c6f770000000000000000000000000000000000000000000000006044820152fd5b8151630b135d3f60e11b9392907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7e0161101b575b610f3490611302565b90610f45610f4182611299565b1590565b8015611009575b611000575b90610f5f610f659284611055565b92611055565b610fa0610f8760005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8093161491821592610fd0575b5050610fca57565b60009150565b909150610ff5610f8760015473ffffffffffffffffffffffffffffffffffffffff1690565b911614153880610fc2565b60009450610f51565b50611016610f4183611299565b610f4c565b50610f3460405161102b81610176565b6082815260a0366020830137601b61104d8282611047826109bc565b536109cd565b539050610f2b565b61025e91611062916111c5565b91909161108a565b6005111561107457565b634e487b7160e01b600052602160045260246000fd5b6110938161106a565b8061109b5750565b6110a48161106a565b600181036110f15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6110fa8161106a565b600281036111475760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b8061115360039261106a565b1461115a57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b9060418151146000146111f3576111ef916020820151906060604084015193015160001a906111fd565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161128d5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561128057815173ffffffffffffffffffffffffffffffffffffffff81161561127a579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b60418151036112f05760ff6041604083015192015116601b81141590816112f6575b506112f0577f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0106112eb57600190565b600090565b50600090565b601c91501415386112bb565b6082815103611364576113136108d2565b9161131c6108d2565b916020810151604082015160ff6041840151169160208701526040860152606085015360618101519060ff608260818301519201511691602085015260408401526060830153565b606460405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206c656e6774680000000000000000000000000000000000006044820152fdfea264697066735822122075e37176fade1423d2afc169263870adbaf85d78238e4f1dad2cc112192bbf6f64736f6c63430008110033
    }


    /**
     * account1 Installs code in its own EOA (via InstallCode), and then acc2 calls a contract
     * that invokes a method on acc1 and checks for success.
     * */
    @Test
    public void testInstallCode_CallExecution() throws FileNotFoundException, DslProcessorException {
        DslParser parser = DslParser.fromResource("dsl/transaction/execution_type_AA.txt");
        processor.processCommands(parser);

        Account acc1 = world.getAccountByName("acc1");
        acc1.getAddress();

        RepositorySnapshot snapshot = world.getRepositoryLocator()
                .findSnapshotAt(world.getBlockByName("b02").getHeader())
                .get();

        byte[] code = snapshot.getCode(acc1.getAddress());
        assertNotNull(code);
        assertTrue(code.length  > 0);
        AccountState state = snapshot.getAccountState(acc1.getAddress());
        assertTrue(state.isSmart());

        TransactionReceipt transactionReceipt = world.getTransactionReceiptByName("tx03");
        assertFalse(transactionReceipt.getLogInfoList().isEmpty());
    }
}
